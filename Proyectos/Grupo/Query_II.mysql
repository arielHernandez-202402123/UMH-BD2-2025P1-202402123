-- =============================
-- DATOS INICIALES PARA LAS TABLAS
-- =============================

-- Insertar datos iniciales de Hoteles
INSERT INTO Hotel (nombre_hotel, direccion_hotel, contacto_nombre, contacto_cargo, telefono, fax, email) VALUES 
('Plaza San Francisco', 'Alameda 123, Santiago', 'Carmen Angulo', 'Jefa de Convenciones', '56-2-360 4488', '56-2-360 4486', 'cangulo@plazasanfrancisco.cl'),
('Caesar Business Santiago', 'Av. Kennedy 100, Santiago', 'Victor Hernández', 'Reservas', '56-2-595 6708', '56-2-595 6704', 'reservas.cbsac@caesarbusiness.com'),
('Sheraton Santiago', 'Av. Santa María 1742, Santiago', 'María José Castillo', 'Coord. de Grupos', '56-2-707 0690', '56-2-707 0108', 'maria.castillo@sheraton.com'),
('San Cristóbal Tower', 'Av. Santa María 1742, Santiago', 'María José Castillo', 'Coord. de Grupos', '56-2-707 0690', '56-2-707 0108', 'maria.castillo@sheraton.com');

-- Insertar datos iniciales de Tipos de Habitaciones
INSERT INTO TipoHabitacion (nombre_tipo, descripcion) VALUES
('Standard', 'Habitación básica con todas las comodidades esenciales'),
('Classic', 'Habitación con diseño tradicional y comodidades adicionales'),
('Grand Deluxe', 'Habitación de lujo con servicios exclusivos y amplio espacio');

-- Insertar datos iniciales de Precios por Habitación
INSERT INTO PrecioHabitacion (id_hotel, id_tipo_habitacion, precio_single, precio_doble, precio_twin, moneda) VALUES
(1, 1, 125, 145, 145, 'USD'), -- Plaza San Francisco - Standard
(2, 1, 110, 120, 120, 'USD'), -- Caesar Business - Standard
(3, 2, 155, 155, 155, 'USD'), -- Sheraton - Classic
(4, 3, 190, 190, 190, 'USD'); -- San Cristóbal - Grand Deluxe

-- Insertar datos iniciales de Disponibilidad (para los próximos 30 días)
DELIMITER //
CREATE PROCEDURE InicializarDisponibilidad()
BEGIN
    DECLARE fecha_actual DATE;
    DECLARE contador INT DEFAULT 0;
    
    SET fecha_actual = CURDATE();
    
    WHILE contador < 30 DO
        -- Plaza San Francisco - Standard
        INSERT INTO DisponibilidadHabitacion (id_hotel, id_tipo_habitacion, fecha, habitaciones_existentes, habitaciones_ocupadas, habitaciones_disponibles, temporada)
        VALUES (1, 1, DATE_ADD(fecha_actual, INTERVAL contador DAY), 20, 0, 20, 'Normal');
        
        -- Caesar Business - Standard
        INSERT INTO DisponibilidadHabitacion (id_hotel, id_tipo_habitacion, fecha, habitaciones_existentes, habitaciones_ocupadas, habitaciones_disponibles, temporada)
        VALUES (2, 1, DATE_ADD(fecha_actual, INTERVAL contador DAY), 30, 0, 30, 'Normal');
        
        -- Sheraton - Classic
        INSERT INTO DisponibilidadHabitacion (id_hotel, id_tipo_habitacion, fecha, habitaciones_existentes, habitaciones_ocupadas, habitaciones_disponibles, temporada)
        VALUES (3, 2, DATE_ADD(fecha_actual, INTERVAL contador DAY), 25, 0, 25, 'Normal');
        
        -- San Cristóbal - Grand Deluxe
        INSERT INTO DisponibilidadHabitacion (id_hotel, id_tipo_habitacion, fecha, habitaciones_existentes, habitaciones_ocupadas, habitaciones_disponibles, temporada)
        VALUES (4, 3, DATE_ADD(fecha_actual, INTERVAL contador DAY), 15, 0, 15, 'Normal');
        
        SET contador = contador + 1;
    END WHILE;
END //
DELIMITER ;

-- Ejecutar el procedimiento para inicializar la disponibilidad
CALL InicializarDisponibilidad();

-- =============================
-- FUNCIONES Y PROCEDIMIENTOS
-- =============================

-- Función para verificar disponibilidad
DELIMITER //
CREATE FUNCTION VerificarDisponibilidad(
    p_id_hotel INT,
    p_id_tipo_habitacion INT,
    p_fecha_ingreso DATE,
    p_fecha_salida DATE
) RETURNS BOOLEAN
BEGIN
    DECLARE esta_disponible BOOLEAN DEFAULT TRUE;
    DECLARE fecha_actual DATE;
    DECLARE disponibles INT;
    
    SET fecha_actual = p_fecha_ingreso;
    
    -- Verificar disponibilidad para cada día del rango de fechas
    WHILE fecha_actual < p_fecha_salida AND esta_disponible = TRUE DO
        SELECT habitaciones_disponibles INTO disponibles
        FROM DisponibilidadHabitacion
        WHERE id_hotel = p_id_hotel
        AND id_tipo_habitacion = p_id_tipo_habitacion
        AND fecha = fecha_actual;
        
        IF disponibles IS NULL OR disponibles <= 0 THEN
            SET esta_disponible = FALSE;
        END IF;
        
        SET fecha_actual = DATE_ADD(fecha_actual, INTERVAL 1 DAY);
    END WHILE;
    
    RETURN esta_disponible;
END //
DELIMITER ;

-- Función para calcular el número de noches
DELIMITER //
CREATE FUNCTION CalcularNoches(
    p_fecha_ingreso DATE,
    p_fecha_salida DATE
) RETURNS INT
BEGIN
    RETURN DATEDIFF(p_fecha_salida, p_fecha_ingreso);
END //
DELIMITER ;

-- Procedimiento para actualizar disponibilidad al crear o cancelar una reserva
DELIMITER //
CREATE PROCEDURE ActualizarDisponibilidad(
    p_id_hotel INT,
    p_id_tipo_habitacion INT,
    p_fecha_ingreso DATE,
    p_fecha_salida DATE,
    p_incrementar BOOLEAN -- TRUE para incrementar ocupación (nueva reserva), FALSE para decrementar (cancelación)
)
BEGIN
    DECLARE fecha_actual DATE;
    SET fecha_actual = p_fecha_ingreso;
    
    -- Actualizar cada día del rango de fechas
    WHILE fecha_actual < p_fecha_salida DO
        IF p_incrementar THEN
            -- Incrementar ocupación (nueva reserva)
            UPDATE DisponibilidadHabitacion
            SET habitaciones_ocupadas = habitaciones_ocupadas + 1,
                habitaciones_disponibles = habitaciones_disponibles - 1
            WHERE id_hotel = p_id_hotel
            AND id_tipo_habitacion = p_id_tipo_habitacion
            AND fecha = fecha_actual;
        ELSE
            -- Decrementar ocupación (cancelación)
            UPDATE DisponibilidadHabitacion
            SET habitaciones_ocupadas = habitaciones_ocupadas - 1,
                habitaciones_disponibles = habitaciones_disponibles + 1
            WHERE id_hotel = p_id_hotel
            AND id_tipo_habitacion = p_id_tipo_habitacion
            AND fecha = fecha_actual;
        END IF;
        
        SET fecha_actual = DATE_ADD(fecha_actual, INTERVAL 1 DAY);
    END WHILE;
END //
DELIMITER ;

-- Procedimiento para crear una nueva reserva
DELIMITER //
CREATE PROCEDURE CrearReserva(
    -- Datos del participante
    p_nombre VARCHAR(100),
    p_apellido VARCHAR(100),
    p_organizacion VARCHAR(100),
    p_cargo VARCHAR(100),
    p_num_pasaporte VARCHAR(50),
    p_fecha_nacimiento DATE,
    p_nacionalidad VARCHAR(50),
    p_direccion VARCHAR(200),
    p_ciudad VARCHAR(100),
    p_pais VARCHAR(100),
    p_telefono VARCHAR(50),
    p_fax VARCHAR(50),
    p_email VARCHAR(100),
    
    -- Datos de la reserva
    p_id_hotel INT,
    p_id_tipo_habitacion INT,
    p_fecha_ingreso DATE,
    p_fecha_salida DATE,
    p_vuelo_arribo VARCHAR(50),
    p_vuelo_salida VARCHAR(50),
    p_early_check_in BOOLEAN,
    
    -- Datos del pago
    p_tipo_tarjeta VARCHAR(20),
    p_numero_tarjeta VARCHAR(20),
    p_fecha_vencimiento DATE,
    p_nombre_titular VARCHAR(100),
    
    -- Variable de salida
    OUT p_id_reserva INT,
    OUT p_mensaje VARCHAR(200)
)
BEGIN
    DECLARE id_participante INT;
    DECLARE num_noches INT;
    DECLARE hay_disponibilidad BOOLEAN;
    
    -- Iniciar transacción
    START TRANSACTION;
    
    -- Verificar disponibilidad
    SET hay_disponibilidad = VerificarDisponibilidad(p_id_hotel, p_id_tipo_habitacion, p_fecha_ingreso, p_fecha_salida);
    
    IF hay_disponibilidad = FALSE THEN
        SET p_mensaje = 'No hay disponibilidad para las fechas seleccionadas';
        SET p_id_reserva = 0;
        ROLLBACK;
    ELSE
        -- Insertar o actualizar participante
        SELECT id_participante INTO id_participante FROM Participante 
        WHERE num_pasaporte = p_num_pasaporte LIMIT 1;
        
        IF id_participante IS NULL THEN
            -- Crear nuevo participante
            INSERT INTO Participante (
                nombre, apellido, organizacion, cargo, num_pasaporte, fecha_nacimiento,
                nacionalidad, direccion, ciudad, pais, telefono, fax, email
            ) VALUES (
                p_nombre, p_apellido, p_organizacion, p_cargo, p_num_pasaporte, p_fecha_nacimiento,
                p_nacionalidad, p_direccion, p_ciudad, p_pais, p_telefono, p_fax, p_email
            );
            
            SET id_participante = LAST_INSERT_ID();
        ELSE
            -- Actualizar datos del participante existente
            UPDATE Participante SET
                nombre = p_nombre,
                apellido = p_apellido,
                organizacion = p_organizacion,
                cargo = p_cargo,
                fecha_nacimiento = p_fecha_nacimiento,
                nacionalidad = p_nacionalidad,
                direccion = p_direccion,
                ciudad = p_ciudad,
                pais = p_pais,
                telefono = p_telefono,
                fax = p_fax,
                email = p_email
            WHERE id_participante = id_participante;
        END IF;
        
        -- Calcular noches
        SET num_noches = CalcularNoches(p_fecha_ingreso, p_fecha_salida);
        
        -- Crear reserva
        INSERT INTO Reserva (
            id_participante, id_hotel, id_tipo_habitacion, fecha_arribo, fecha_salida,
            num_noches, vuelo_arribo, vuelo_salida, early_check_in, estado_reserva
        ) VALUES (
            id_participante, p_id_hotel, p_id_tipo_habitacion, p_fecha_ingreso, p_fecha_salida,
            num_noches, p_vuelo_arribo, p_vuelo_salida, p_early_check_in, 'Confirmada'
        );
        
        SET p_id_reserva = LAST_INSERT_ID();
        
        -- Registrar método de pago
        INSERT INTO MetodoPago (
            id_reserva, tipo_tarjeta, numero_tarjeta, fecha_vencimiento, nombre_titular
        ) VALUES (
            p_id_reserva, p_tipo_tarjeta, p_numero_tarjeta, p_fecha_vencimiento, p_nombre_titular
        );
        
        -- Actualizar disponibilidad
        CALL ActualizarDisponibilidad(p_id_hotel, p_id_tipo_habitacion, p_fecha_ingreso, p_fecha_salida, TRUE);
        
        SET p_mensaje = CONCAT('Reserva creada exitosamente con ID: ', p_id_reserva);
        COMMIT;
    END IF;
END //
DELIMITER ;

-- Procedimiento para cancelar una reserva
DELIMITER //
CREATE PROCEDURE CancelarReserva(
    p_id_reserva INT,
    OUT p_mensaje VARCHAR(200)
)
BEGIN
    DECLARE v_id_hotel INT;
    DECLARE v_id_tipo_habitacion INT;
    DECLARE v_fecha_ingreso DATE;
    DECLARE v_fecha_salida DATE;
    DECLARE v_estado VARCHAR(20);
    
    -- Iniciar transacción
    START TRANSACTION;
    
    -- Obtener datos de la reserva
    SELECT id_hotel, id_tipo_habitacion, fecha_arribo, fecha_salida, estado_reserva 
    INTO v_id_hotel, v_id_tipo_habitacion, v_fecha_ingreso, v_fecha_salida, v_estado
    FROM Reserva
    WHERE id_reserva = p_id_reserva;
    
    IF v_id_hotel IS NULL THEN
        SET p_mensaje = 'La reserva no existe';
        ROLLBACK;
    ELSEIF v_estado = 'Cancelada' THEN
        SET p_mensaje = 'La reserva ya está cancelada';
        ROLLBACK;
    ELSE
        -- Actualizar estado de la reserva
        UPDATE Reserva
        SET estado_reserva = 'Cancelada'
        WHERE id_reserva = p_id_reserva;
        
        -- Actualizar disponibilidad
        CALL ActualizarDisponibilidad(v_id_hotel, v_id_tipo_habitacion, v_fecha_ingreso, v_fecha_salida, FALSE);
        
        SET p_mensaje = CONCAT('Reserva ', p_id_reserva, ' cancelada exitosamente');
        COMMIT;
    END IF;
END //
DELIMITER ;

-- Procedimiento para buscar hoteles disponibles
DELIMITER //
CREATE PROCEDURE BuscarHotelesDisponibles(
    p_fecha_ingreso DATE,
    p_fecha_salida DATE
)
BEGIN
    SELECT 
        h.id_hotel,
        h.nombre_hotel,
        t.id_tipo_habitacion,
        t.nombre_tipo,
        p.precio_single,
        p.precio_doble,
        p.precio_twin,
        p.moneda,
        MIN(d.habitaciones_disponibles) as disponibilidad_minima
    FROM 
        Hotel h
    JOIN PrecioHabitacion p ON h.id_hotel = p.id_hotel
    JOIN TipoHabitacion t ON p.id_tipo_habitacion = t.id_tipo_habitacion
    JOIN DisponibilidadHabitacion d ON h.id_hotel = d.id_hotel AND t.id_tipo_habitacion = d.id_tipo_habitacion
    WHERE 
        d.fecha BETWEEN p_fecha_ingreso AND DATE_SUB(p_fecha_salida, INTERVAL 1 DAY)
    GROUP BY 
        h.id_hotel, t.id_tipo_habitacion
    HAVING 
        disponibilidad_minima > 0
    ORDER BY 
        h.nombre_hotel, t.nombre_tipo;
END //
DELIMITER ;

-- Procedimiento para obtener detalles de reserva
DELIMITER //
CREATE PROCEDURE ObtenerDetalleReserva(
    p_id_reserva INT
)
BEGIN
    SELECT 
        r.id_reserva,
        r.fecha_arribo,
        r.fecha_salida,
        r.num_noches,
        r.vuelo_arribo,
        r.vuelo_salida,
        r.early_check_in,
        r.estado_reserva,
        
        p.nombre,
        p.apellido,
        p.organizacion,
        p.cargo,
        p.num_pasaporte,
        p.nacionalidad,
        p.email,
        p.telefono,
        
        h.nombre_hotel,
        t.nombre_tipo,
        
        CASE 
            WHEN mp.tipo_tarjeta = 'AMEX' THEN 'American Express'
            WHEN mp.tipo_tarjeta = 'VISA' THEN 'Visa'
            WHEN mp.tipo_tarjeta = 'Mastercard' THEN 'MasterCard'
            WHEN mp.tipo_tarjeta = 'Diners' THEN 'Diners Club'
            ELSE mp.tipo_tarjeta
        END as metodo_pago,
        
        CONCAT('XXXX-XXXX-XXXX-', RIGHT(mp.numero_tarjeta, 4)) as tarjeta_enmascarada,
        
        ph.precio_single,
        ph.precio_doble,
        ph.precio_twin,
        ph.moneda
    FROM 
        Reserva r
    JOIN Participante p ON r.id_participante = p.id_participante
    JOIN Hotel h ON r.id_hotel = h.id_hotel
    JOIN TipoHabitacion t ON r.id_tipo_habitacion = t.id_tipo_habitacion
    JOIN MetodoPago mp ON r.id_reserva = mp.id_reserva
    JOIN PrecioHabitacion ph ON r.id_hotel = ph.id_hotel AND r.id_tipo_habitacion = ph.id_tipo_habitacion
    WHERE 
        r.id_reserva = p_id_reserva;
END //
DELIMITER ;

-- Procedimiento para modificar una reserva existente
DELIMITER //
CREATE PROCEDURE ModificarReserva(
    p_id_reserva INT,
    p_id_hotel INT,
    p_id_tipo_habitacion INT,
    p_fecha_ingreso DATE,
    p_fecha_salida DATE,
    p_vuelo_arribo VARCHAR(50),
    p_vuelo_salida VARCHAR(50),
    p_early_check_in BOOLEAN,
    OUT p_mensaje VARCHAR(200)
)
BEGIN
    DECLARE v_id_hotel_anterior INT;
    DECLARE v_id_tipo_habitacion_anterior INT;
    DECLARE v_fecha_ingreso_anterior DATE;
    DECLARE v_fecha_salida_anterior DATE;
    DECLARE v_estado VARCHAR(20);
    DECLARE hay_disponibilidad BOOLEAN;
    DECLARE num_noches INT;
    
    -- Iniciar transacción
    START TRANSACTION;
    
    -- Obtener datos actuales de la reserva
    SELECT id_hotel, id_tipo_habitacion, fecha_arribo, fecha_salida, estado_reserva 
    INTO v_id_hotel_anterior, v_id_tipo_habitacion_anterior, v_fecha_ingreso_anterior, v_fecha_salida_anterior, v_estado
    FROM Reserva
    WHERE id_reserva = p_id_reserva;
    
    IF v_id_hotel_anterior IS NULL THEN
        SET p_mensaje = 'La reserva no existe';
        ROLLBACK;
    ELSEIF v_estado = 'Cancelada' THEN
        SET p_mensaje = 'No se puede modificar una reserva cancelada';
        ROLLBACK;
    ELSE
        -- Si cambia el hotel, tipo de habitación o fechas, verificar disponibilidad
        IF (v_id_hotel_anterior != p_id_hotel OR 
            v_id_tipo_habitacion_anterior != p_id_tipo_habitacion OR 
            v_fecha_ingreso_anterior != p_fecha_ingreso OR 
            v_fecha_salida_anterior != p_fecha_salida) THEN
            
            -- Verificar disponibilidad para las nuevas fechas/hotel/tipo
            SET hay_disponibilidad = VerificarDisponibilidad(p_id_hotel, p_id_tipo_habitacion, p_fecha_ingreso, p_fecha_salida);
            
            IF hay_disponibilidad = FALSE THEN
                SET p_mensaje = 'No hay disponibilidad para las nuevas fechas o tipo de habitación';
                ROLLBACK;
            ELSE
                -- Liberar disponibilidad de la reserva anterior
                CALL ActualizarDisponibilidad(v_id_hotel_anterior, v_id_tipo_habitacion_anterior, 
                                             v_fecha_ingreso_anterior, v_fecha_salida_anterior, FALSE);
                
                -- Ocupar disponibilidad para la nueva reserva
                CALL ActualizarDisponibilidad(p_id_hotel, p_id_tipo_habitacion, 
                                             p_fecha_ingreso, p_fecha_salida, TRUE);
                
                -- Calcular noches
                SET num_noches = CalcularNoches(p_fecha_ingreso, p_fecha_salida);
                
                -- Actualizar la reserva
                UPDATE Reserva SET
                    id_hotel = p_id_hotel,
                    id_tipo_habitacion = p_id_tipo_habitacion,
                    fecha_arribo = p_fecha_ingreso,
                    fecha_salida = p_fecha_salida,
                    num_noches = num_noches,
                    vuelo_arribo = p_vuelo_arribo,
                    vuelo_salida = p_vuelo_salida,
                    early_check_in = p_early_check_in
                WHERE id_reserva = p_id_reserva;
                
                SET p_mensaje = 'Reserva modificada exitosamente';
                COMMIT;
            END IF;
        ELSE
            -- Solo actualizar información de vuelos y early check-in
            UPDATE Reserva SET
                vuelo_arribo = p_vuelo_arribo,
                vuelo_salida = p_vuelo_salida,
                early_check_in = p_early_check_in
            WHERE id_reserva = p_id_reserva;
            
            SET p_mensaje = 'Información de la reserva actualizada exitosamente';
            COMMIT;
        END IF;
    END IF;
END //
DELIMITER ;

-- Función para obtener precio total de la reserva
DELIMITER //
CREATE FUNCTION CalcularPrecioTotal(
    p_id_reserva INT
) RETURNS DECIMAL(10,2)
BEGIN
    DECLARE precio_total DECIMAL(10,2);
    DECLARE tipo_habitacion VARCHAR(20);
    DECLARE noches INT;
    DECLARE precio_noche DECIMAL(10,2);
    
    -- Obtener información de la reserva
    SELECT 
        r.num_noches,
        t.nombre_tipo,
        CASE 
            WHEN t.nombre_tipo LIKE '%single%' THEN ph.precio_single
            WHEN t.nombre_tipo LIKE '%doble%' THEN ph.precio_doble
            ELSE ph.precio_single -- Por defecto usamos precio single
        END as precio_por_noche
    INTO 
        noches, tipo_habitacion, precio_noche
    FROM 
        Reserva r
    JOIN TipoHabitacion t ON r.id_tipo_habitacion = t.id_tipo_habitacion
    JOIN PrecioHabitacion ph ON r.id_hotel = ph.id_hotel AND r.id_tipo_habitacion = ph.id_tipo_habitacion
    WHERE 
        r.id_reserva = p_id_reserva;
    
    -- Calcular precio total
    SET precio_total = noches * precio_noche;
    
    RETURN precio_total;
END //
DELIMITER ;

-- Procedimiento para generar un reporte de ocupación por período
DELIMITER //
CREATE PROCEDURE ReporteOcupacion(
    p_fecha_inicio DATE,
    p_fecha_fin DATE
)
BEGIN
    SELECT 
        h.nombre_hotel,
        t.nombre_tipo,
        d.fecha,
        d.habitaciones_existentes,
        d.habitaciones_ocupadas,
        d.habitaciones_disponibles,
        ROUND((d.habitaciones_ocupadas / d.habitaciones_existentes) * 100, 2) as porcentaje_ocupacion,
        d.temporada
    FROM 
        DisponibilidadHabitacion d
    JOIN Hotel h ON d.id_hotel = h.id_hotel
    JOIN TipoHabitacion t ON d.id_tipo_habitacion = t.id_tipo_habitacion
    WHERE 
        d.fecha BETWEEN p_fecha_inicio AND p_fecha_fin
    ORDER BY 
        d.fecha, h.nombre_hotel, t.nombre_tipo;
END //
DELIMITER ;

